{"version":3,"sources":["components/Nav.js","firebaseConfig.js","components/Article.js","components/ArticleEntry.js","services/authService.js","services/articleService.js","components/App.js","index.js"],"names":["Nav","articles","setArticle","map","a","onClick","title","id","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","getAuth","db","getFirestore","Article","article","className","Date","body","ArticleEntry","addArticle","useState","setTitle","setBody","error","setError","onSubmit","e","preventDefault","trim","value","onChange","target","rows","type","SignIn","signInWithPopup","GoogleAuthProvider","SignOut","currentUser","displayName","signOut","data","date","Timestamp","now","addDoc","collection","docRef","getDocs","query","orderBy","limit","snapshot","docs","doc","App","setArticles","writing","setWriting","user","setUser","useEffect","onAuthStateChanged","useAuthentication","fetchArticles","then","createArticle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d66caedb.chunk.js","sourcesContent":["export default function Nav({ articles, setArticle }) {\n  return (\n    <nav>\n      {!articles\n        ? \"No articles\"\n        : articles.map((a) => (\n            <p key={a.id} onClick={() => setArticle(a)}>\n              {a.title}\n            </p>\n          ))}\n    </nav>\n  );\n}\n","import { initializeApp } from \"firebase/app\"\nimport { getAuth } from \"firebase/auth\"\nimport { getFirestore } from \"firebase/firestore\"\n\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAU_HaPJZW3NCXxvobWLpJGXyS0tAgDgu8\",\n  authDomain: \"personal-blog-e6611.firebaseapp.com\",\n  projectId: \"personal-blog-e6611\",\n  storageBucket: \"personal-blog-e6611.appspot.com\",\n  messagingSenderId: \"44728060828\",\n  appId: \"1:44728060828:web:e28a92b160e60ebe475659\"\n};\n\nexport const app = initializeApp(firebaseConfig)\nexport const auth = getAuth(app)\nexport const db = getFirestore(app)","import { doc, deleteDoc } from \"firebase/firestore\";\nimport { db } from \"../firebaseConfig\"\n\nexport default function Article({ article }) {\n  function deleteArticle(){\n    article = null;\n  }\n  return (\n    <article>\n      {!article ? (\n        <p id = \"welcome\">Welcome to My Anime Blog! Where I write personal reviews of the animes I have watched!</p>\n      ) : (\n        <section id = \"textOutput\">\n          <h2>{article.title}</h2>\n          <p className=\"date\">{`Posted: ${new Date}`}</p>\n          <p className=\"body\">{article.body}</p>\n          <button onClick = \"deleteArticle()\">Remove Anime from list</button>\n        </section>\n        \n      )}\n    </article>\n  );\n}\n\n","import { useState } from \"react\";\n\nexport default function ArticleEntry({ addArticle }) {\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [error, setError] = useState(null);\n\n  function submit(e) {\n    setError(null);\n    e.preventDefault();\n    if (!title.trim() || !body.trim()) {\n      setError(\"Both the title and body must be supplied\");\n    } else {\n      addArticle({ title, body });\n    }\n  }\n\n  return (\n    <div>\n      <form onSubmit={submit}>\n        {error && <p className=\"error\">{error}</p>}\n        <p id = \"entry1\">Anime Name</p>\n        <input value={title} onChange={(e) => setTitle(e.target.value)} />\n        <p id = \"entry2\">Personal Review</p>;\n        <textarea\n          rows=\"8\"\n          value={body}\n          onChange={(e) => setBody(e.target.value)}\n        ></textarea>\n        <button type=\"submit\">Create</button>\n      </form>\n    </div>\n  );\n}\n","import { useState, useEffect } from \"react\"\nimport { signInWithPopup, GoogleAuthProvider, signOut } from \"firebase/auth\"\nimport { auth } from \"../firebaseConfig\"\n\nexport function SignIn() {\n  return <button onClick={() => signInWithPopup(auth, new GoogleAuthProvider())}>Sign In</button>\n}\n\nexport function SignOut() {\n  return (\n    <div>\n      Hello, {auth.currentUser.displayName} &nbsp;\n      <button onClick={() => signOut(auth)}>Sign Out</button>\n    </div>\n  )\n}\n\nexport function useAuthentication() {\n  const [user, setUser] = useState(null)\n  useEffect(() => {\n    return auth.onAuthStateChanged((user) => {\n      user ? setUser(user) : setUser(null)\n    })\n  }, [])\n  return user\n}","// This service completely hides the data store from the rest of the app.\n// No other part of the app knows how the data is stored. If anyone wants\n// to read or write data, they have to go through this service.\n\nimport { db } from \"../firebaseConfig\"\nimport { collection, query, getDocs, addDoc, orderBy, limit, Timestamp } from \"firebase/firestore\"\n\nexport async function createArticle({ title, body }) {\n  const data = { title, body, date: Timestamp.now() }\n  const docRef = await addDoc(collection(db, \"articles\"), data)\n  return { id: docRef.id, ...data }\n}\n\n// NOT FINISHED: This only gets the first 20 articles. In a real app,\n// you implement pagination.\nexport async function fetchArticles() {\n  const snapshot = await getDocs(\n    query(collection(db, \"articles\"), orderBy(\"date\", \"desc\"), limit(20))\n  )\n  return snapshot.docs.map((doc) => ({\n    id: doc.id,\n    ...doc.data(),\n  }))\n}","import { useEffect, useState } from \"react\"\nimport Nav from \"./Nav\"\nimport Article from \"./Article\"\nimport ArticleEntry from \"./ArticleEntry\"\nimport { SignIn, SignOut, useAuthentication } from \"../services/authService\"\nimport { fetchArticles, createArticle } from \"../services/articleService\"\nimport \"./App.css\"\n\nexport default function App() {\n  const [articles, setArticles] = useState([])\n  const [article, setArticle] = useState(null)\n  const [writing, setWriting] = useState(false)\n  const user = useAuthentication()\n\n  // This is a trivial app, so just fetch all the articles only when\n  // a user logs in. A real app would do pagination. Note that\n  // \"fetchArticles\" is what gets the articles from the service and\n  // then \"setArticles\" writes them into the React state.\n  useEffect(() => {\n    if (user) {\n      fetchArticles().then(setArticles)\n    }\n  }, [user])\n\n  // Update the \"database\" *then* update the internal React state. These\n  // two steps are definitely necessary.\n  function addArticle({ title, body }) {\n    createArticle({ title, body }).then((article) => {\n      setArticle(article)\n      setArticles([article, ...articles])\n      setWriting(false)\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <div id = \"title\">My Anime Blog</div>\n        {user && <button onClick={() => setWriting(true)}>Add Anime</button>}\n        {!user ? <SignIn /> : <SignOut />}\n      </header>\n\n      {!user ? \"\" : <Nav articles={articles} setArticle={setArticle} />}\n\n      {!user ? (\n        \"\"\n      ) : writing ? (\n        <ArticleEntry addArticle={addArticle} />\n      ) : (\n        <Article article={article} />\n      )}\n    </div>\n  )\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}